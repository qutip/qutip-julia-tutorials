[
  {
    "objectID": "QuantumToolbox.jl/lowrank.html",
    "href": "QuantumToolbox.jl/lowrank.html",
    "title": "Low rank master equation",
    "section": "",
    "text": "In this tutorial, we will show how to solve the master equation using the low-rank method. For a detailed explanation of the method, we recommend to read the Ref. (Gravina and Savona 2024).\nAs a test, we will consider the dissipative Ising model with a transverse field. The Hamiltonian is given by\n\\[\n\\hat{H} = \\frac{J_x}{2} \\sum_{\\langle i,j\\rangle} \\sigma_i^x \\sigma_j^x + \\frac{J_y}{2} \\sum_{\\langle i,j\\rangle} \\sigma_i^y \\sigma_j^y + \\frac{J_z}{2} \\sum_{\\langle i,j\\rangle} \\sigma_i^z \\sigma_j^z - \\sum_i h_i \\sigma_i^z + h_x \\sum_i \\sigma_i^x + h_y \\sum_i \\sigma_i^y + h_z \\sum_i \\sigma_i^z\n\\] K where the sums are over nearest neighbors, and the collapse operators are given by\n\\[\nc_i = \\sqrt{\\gamma} \\sigma_i^{-}\n\\]\nWe start by importing the packages\nusing QuantumToolbox\nusing CairoMakie\nDefine lattice\nNx, Ny = 2, 3\nlatt = Lattice(Nx = Nx, Ny = Ny)\n\nLattice{Int64, LinearIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}}(2, 3, 6, [1 3 5; 2 4 6], CartesianIndices((2, 3)))\nDefine lr-space dimensions\nN_cut = 2\nN_modes = latt.N\nN = N_cut^N_modes\nM = latt.N + 1\n\n7\nDefine lr states. Take as initial state all spins up. All other N states are taken as those with minimum Hamming distance to the initial state.\nϕ = Vector{QuantumObject{Vector{ComplexF64},KetQuantumObject,M-1}}(undef, M)\nϕ[1] = kron(fill(basis(2, 1), N_modes)...)\n\ni = 1\nfor j in 1:N_modes\n    global i += 1\n    i &lt;= M && (ϕ[i] = MultiSiteOperator(latt, j=&gt;sigmap()) * ϕ[1])\nend\nfor k in 1:N_modes-1\n    for l in k+1:N_modes\n        global i += 1\n        i &lt;= M && (ϕ[i] = MultiSiteOperator(latt, k=&gt;sigmap(), l=&gt;sigmap()) * ϕ[1])\n    end\nend\nfor i in i+1:M\n    ϕ[i] = QuantumObject(rand(ComplexF64, size(ϕ[1])[1]), dims = ϕ[1].dims)\n    normalize!(ϕ[i])\nend\nDefine the initial state\nz = hcat(get_data.(ϕ)...)\nB = Matrix(Diagonal([1 + 0im; zeros(M - 1)]))\nS = z' * z # Overlap matrix\nB = B / tr(S * B) # Normalize B\n\nρ = QuantumObject(z * B * z', dims = ntuple(i-&gt;N_cut, Val(N_modes))); # Full density matrix\nDefine the Hamiltonian and collapse operators\n# Define Hamiltonian and collapse operators\nJx = 0.9\nJy = 1.04\nJz = 1.0\nhx = 0.0\nhy = 0.0\nhz = 0.0\nγ = 1\n\nSx = mapreduce(i-&gt;MultiSiteOperator(latt, i=&gt;sigmax()), +, 1:latt.N)\nSy = mapreduce(i-&gt;MultiSiteOperator(latt, i=&gt;sigmay()), +, 1:latt.N)\nSz = mapreduce(i-&gt;MultiSiteOperator(latt, i=&gt;sigmaz()), +, 1:latt.N)\n\nH, c_ops = DissipativeIsing(Jx, Jy, Jz, hx, hy, hz, γ, latt; boundary_condition = Val(:periodic_bc), order = 1)\ne_ops = (Sx, Sy, Sz)\n\ntl = range(0, 10, 100)\n\n0.0:0.10101010101010101:10.0"
  },
  {
    "objectID": "QuantumToolbox.jl/lowrank.html#full-evolution",
    "href": "QuantumToolbox.jl/lowrank.html#full-evolution",
    "title": "Low rank master equation",
    "section": "Full evolution",
    "text": "Full evolution\n\nsol_me = mesolve(H, ρ, tl, c_ops; e_ops = [e_ops...]);\nStrue = entropy_vn(sol_me.states[end], base=2) / latt.N\n\nProgress: [==============================] 100.0% --- Elapsed Time: 0h 00m 00s (ETA: 0h 00m 00s)\n\n\n0.29324728062546046"
  },
  {
    "objectID": "QuantumToolbox.jl/lowrank.html#low-rank-evolution",
    "href": "QuantumToolbox.jl/lowrank.html#low-rank-evolution",
    "title": "Low rank master equation",
    "section": "Low Rank Evolution",
    "text": "Low Rank Evolution\nDefine functions to be evaluated during the low-rank evolution\n\nfunction f_purity(p, z, B)\n    N = p.N\n    M = p.M\n    S = p.S\n    T = p.temp_MM\n\n    mul!(T, S, B)\n    return tr(T^2)\nend\n\nfunction f_trace(p, z, B)\n    N = p.N\n    M = p.M\n    S = p.S\n    T = p.temp_MM\n\n    mul!(T, S, B)\n    return tr(T)\nend\n\nfunction f_entropy(p, z, B)\n    C = p.A0\n    σ = p.Bi\n\n    mul!(C, z, sqrt(B))\n    mul!(σ, C', C)\n    return entropy_vn(Qobj(Hermitian(σ), type=Operator), base=2)\nend\n\nf_entropy (generic function with 1 method)\n\n\nDefine the options for the low-rank evolution\n\nopt = (err_max = 1e-3, p0 = 0.0, atol_inv = 1e-6, adj_condition = \"variational\", Δt = 0.0);\n\nsol_lr = lr_mesolve(H, z, B, tl, c_ops; e_ops = e_ops, f_ops = (f_purity, f_entropy, f_trace), opt = opt);\n\nProgress: 2%Progress: 3%Progress: 4%Progress: 5%Progress: 6%Progress: 7%Progress: 8%Progress: 9%Progress: 10%Progress: 11%Progress: 12%Progress: 13%Progress: 14%Progress: 15%Progress: 16%Progress: 17%Progress: 18%Progress: 19%Progress: 20%Progress: 21%Progress: 22%Progress: 23%Progress: 24%Progress: 25%Progress: 26%Progress: 27%Progress: 28%Progress: 29%Progress: 30%Progress: 31%Progress: 32%Progress: 33%Progress: 34%Progress: 35%Progress: 36%Progress: 37%Progress: 38%Progress: 39%Progress: 40%Progress: 41%Progress: 42%Progress: 43%Progress: 44%Progress: 45%Progress: 46%Progress: 47%Progress: 48%Progress: 49%Progress: 50%Progress: 51%Progress: 52%Progress: 53%Progress: 54%Progress: 55%Progress: 56%Progress: 57%Progress: 58%Progress: 59%Progress: 60%Progress: 61%Progress: 62%Progress: 63%Progress: 64%Progress: 65%Progress: 66%Progress: 67%Progress: 68%Progress: 69%Progress: 70%Progress: 71%Progress: 72%Progress: 73%Progress: 74%Progress: 75%Progress: 76%Progress: 77%Progress: 78%Progress: 79%Progress: 80%Progress: 81%Progress: 82%Progress: 83%Progress: 84%Progress: 85%Progress: 86%Progress: 87%Progress: 88%Progress: 89%Progress: 90%Progress: 91%Progress: 92%Progress: 93%Progress: 94%Progress: 95%Progress: 96%Progress: 97%Progress: 98%Progress: 99%Progress: 100%\n\n\nPlot the results\n\nm_me = real(sol_me.expect[3, :]) / Nx / Ny\nm_lr = real(sol_lr.expect[3, :]) / Nx / Ny\n\nfig = Figure(size = (500, 350), fontsize = 15)\nax = Axis(fig[1, 1], xlabel = L\"\\gamma t\", ylabel = L\"M_{z}\", xlabelsize = 20, ylabelsize = 20)\nlines!(ax, tl, m_lr, label = L\"LR $[M=M(t)]$\", linewidth = 2)\nlines!(ax, tl, m_me, label = \"Fock\", linewidth = 2, linestyle = :dash)\naxislegend(ax, position = :rb)\n\nax2 = Axis(fig[1, 2], xlabel = L\"\\gamma t\", ylabel = \"Value\", xlabelsize = 20, ylabelsize = 20)\nlines!(ax2, tl, 1 .- real(sol_lr.fexpect[1, :]), label = L\"$1-P$\", linewidth = 2)\nlines!(\n    ax2,\n    tl,\n    1 .- real(sol_lr.fexpect[3, :]),\n    label = L\"$1-\\mathrm{Tr}(\\rho)$\",\n    linewidth = 2,\n    linestyle = :dash,\n    color = :orange,\n)\nlines!(ax2, tl, real(sol_lr.fexpect[2, :]) / Nx / Ny, color = :blue, label = L\"S\", linewidth = 2)\nhlines!(ax2, [Strue], color = :blue, linestyle = :dash, linewidth = 2, label = L\"S^{\\,\\mathrm{true}}_{\\mathrm{ss}}\")\naxislegend(ax2, position = :rb)\n\nfig"
  },
  {
    "objectID": "QuantumToolbox.jl/lowrank.html#version-information",
    "href": "QuantumToolbox.jl/lowrank.html#version-information",
    "title": "Low rank master equation",
    "section": "Version Information",
    "text": "Version Information\n\nQuantumToolbox.versioninfo()\n\n\n QuantumToolbox.jl: Quantum Toolbox in Julia\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © QuTiP team 2022 and later.\nCurrent admin team:\n    Alberto Mercurio and Yi-Te Huang\n\nPackage information:\n====================================\nJulia              Ver. 1.11.2\nQuantumToolbox     Ver. 0.24.0\nSciMLOperators     Ver. 0.3.12\nLinearSolve        Ver. 2.38.0\nOrdinaryDiffEqCore Ver. 1.14.1\n\nSystem information:\n====================================\nOS       : Linux (x86_64-linux-gnu)\nCPU      : 4 × AMD EPYC 7763 64-Core Processor\nMemory   : 15.615 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-16.0.6 (ORCJIT, znver3)\nBLAS     : libopenblas64_.so (ilp64)\nThreads  : 4 (on 4 virtual cores)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tutorials for Quantum Toolbox in Julia",
    "section": "",
    "text": "This website contains our collection of tutorials for introducing and demonstrating features of Quantum Toolbox in Julia. Going through these tutorials should be a good way to get familiarized with the software. If you are new to scientific computing with Julia, you might also find it useful to have a look at the Julia tutorials website.\nYou can find the tutorials of our packages from the navbar on top, or the following links:\n\n\n\nPackage\nTutorials\nGitHub Repository\nDocumentation\n\n\n\n\nQuantumToolbox.jl\nlink\nlink\nlink\n\n\nHierarchicalEOM.jl\nlink\nlink\nlink"
  },
  {
    "objectID": "HierarchicalEOM.jl/toc.html",
    "href": "HierarchicalEOM.jl/toc.html",
    "title": "Tutorials for HierarchicalEOM.jl",
    "section": "",
    "text": "The following tutorials demonstrate and introduce specific functionality of HierarchicalEOM.jl.\n\n\n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n2025-01-13\n\n\nCavity QED system\n\n\nShen-Liang Yang, Yi-Te Huang\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "QuantumToolbox.jl/toc.html",
    "href": "QuantumToolbox.jl/toc.html",
    "title": "Tutorials for QuantumToolbox.jl",
    "section": "",
    "text": "The following tutorials demonstrate and introduce specific functionality of QuantumToolbox.jl.\n\n\n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n2025-01-13\n\n\nLow rank master equation\n\n\nLuca Gravina\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html",
    "href": "HierarchicalEOM.jl/cavityQED.html",
    "title": "Cavity QED system",
    "section": "",
    "text": "Cavity quantum electrodynamics (cavity QED) is an important topic for studying the interaction between atoms (or other particles) and light confined in a reflective cavity, under conditions where the quantum nature of photons is significant."
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#introduction",
    "href": "HierarchicalEOM.jl/cavityQED.html#introduction",
    "title": "Cavity QED system",
    "section": "",
    "text": "Cavity quantum electrodynamics (cavity QED) is an important topic for studying the interaction between atoms (or other particles) and light confined in a reflective cavity, under conditions where the quantum nature of photons is significant."
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#hamiltonian",
    "href": "HierarchicalEOM.jl/cavityQED.html#hamiltonian",
    "title": "Cavity QED system",
    "section": "Hamiltonian",
    "text": "Hamiltonian\nThe Jaynes-Cummings model is a standard model in the realm of cavity QED. It illustrates the interaction between a two-level atom (\\(\\textrm{A}\\)) and a quantized single-mode within a cavity (\\(\\textrm{c}\\)).\nNow, we need to build the system Hamiltonian and initial state with the package QuantumToolbox.jl to construct the operators.\n\\[\n\\begin{aligned}\nH_{\\textrm{s}}&=H_{\\textrm{A}}+H_{\\textrm{c}}+H_{\\textrm{int}},\\\\\nH_{\\textrm{A}}&=\\frac{\\omega_A}{2}\\sigma_z,\\\\\nH_{\\textrm{c}}&=\\omega_{\\textrm{c}} a^\\dagger a,\\\\\nH_{\\textrm{int}}&=g (a^\\dagger\\sigma^-+a\\sigma^+),\n\\end{aligned}\n\\]\nwhere \\(\\sigma^-\\) (\\(\\sigma^+\\)) is the annihilation (creation) operator of the atom, and \\(a\\) (\\(a^\\dagger\\)) is the annihilation (creation) operator of the cavity.\nFurthermore, we consider the system is coupled to a bosonic reservoir (\\(\\textrm{b}\\)). The total Hamiltonian is given by \\(H_{\\textrm{Total}}=H_\\textrm{s}+H_\\textrm{b}+H_\\textrm{sb}\\), where \\(H_\\textrm{b}\\) and \\(H_\\textrm{sb}\\) takes the form\n\\[\n\\begin{aligned}\nH_{\\textrm{b}}    &=\\sum_{k}\\omega_{k}b_{k}^{\\dagger}b_{k},\\\\\nH_{\\textrm{sb}}   &=(a+a^\\dagger)\\sum_{k}g_{k}(b_k + b_k^{\\dagger}).\n\\end{aligned}\n\\]\nHere, \\(H_{\\textrm{b}}\\) describes a bosonic reservoir where \\(b_{k}\\) \\((b_{k}^{\\dagger})\\) is the bosonic annihilation (creation) operator associated to the \\(k\\)th mode (with frequency \\(\\omega_{k}\\)). Also, \\(H_{\\textrm{sb}}\\) illustrates the interaction between the cavity and the bosonic reservoir.\nNow, we need to build the system Hamiltonian and initial state with the package QuantumToolbox.jl to construct the operators.\n\nusing HierarchicalEOM\nusing CairoMakie\n\n\nN = 3 ## system cavity Hilbert space cutoff\nωA = 2\nωc = 2\ng = 0.1\n\n# operators\na_c = destroy(N)\nI_c = qeye(N)\nσz_A = sigmaz()\nσm_A = sigmam()\nI_A = qeye(2)\n\n# operators in tensor-space\na = tensor(a_c, I_A)\nσz = tensor(I_c, σz_A)\nσm = tensor(I_c, σm_A)\n\n# Hamiltonian\nH_A = 0.5 * ωA * σz\nH_c = ωc * a' * a\nH_int = g * (a' * σm + a * σm')\nH_s = H_A + H_c + H_int\n\n# initial state\nψ0 = tensor(basis(N, 0), basis(2, 0));"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#construct-bath-objects",
    "href": "HierarchicalEOM.jl/cavityQED.html#construct-bath-objects",
    "title": "Cavity QED system",
    "section": "Construct bath objects",
    "text": "Construct bath objects\nWe assume the bosonic reservoir to have a Drude-Lorentz Spectral Density, and we utilize the Padé decomposition. Furthermore, the spectral densities depend on the following physical parameters:\n\nthe coupling strength \\(\\Gamma\\) between system and reservoir\nthe band-width \\(W\\)\nthe product of the Boltzmann constant \\(k\\) and the absolute temperature \\(T\\) : \\(kT\\)\nthe total number of exponentials for the reservoir \\((N + 1)\\)\n\n\nΓ = 0.01\nW = 1\nkT = 0.025\nN = 20\nBath = Boson_DrudeLorentz_Pade(a + a', Γ, W, kT, N)\n\nHierarchicalEOM.BosonBath object with 21 exponential-expansion terms\n\n\nBefore incorporating the correlation function into the HEOMLS matrix, it is essential to verify (by using correlation_function) if the total number of exponentials for the reservoir sufficiently describes the practical situation.\n\ntlist_test = 0:0.1:10;\nBath_test = Boson_DrudeLorentz_Pade(a + a', Γ, W, kT, 1000);\nCt = correlation_function(Bath, tlist_test);\nCt2 = correlation_function(Bath_test, tlist_test)\n\n# plot\nfig = Figure(size = (500, 350))\nax = Axis(fig[1, 1], xlabel = L\"t\", ylabel = L\"C(t)\")\nlines!(ax, tlist_test, real(Ct2), label = L\"$N=1000$ (real part)\", linestyle = :solid)\nlines!(ax, tlist_test, real(Ct),  label = L\"$N=20$ (real part)\", linestyle = :dash)\nlines!(ax, tlist_test, imag(Ct2), label = L\"$N=1000$ (imag part)\", linestyle = :solid)\nlines!(ax, tlist_test, imag(Ct),  label = L\"$N=20$ (imag part)\", linestyle = :dash)\n\naxislegend(ax, position = :rt)\n\nfig"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#construct-heomls-matrix",
    "href": "HierarchicalEOM.jl/cavityQED.html#construct-heomls-matrix",
    "title": "Cavity QED system",
    "section": "Construct HEOMLS matrix",
    "text": "Construct HEOMLS matrix\nHere, we consider an incoherent pumping to the atom, which can be described by an Lindblad dissipator (see here for more details).\nFurthermore, we set the important threshold to be 1e-6.\n\npump = 0.01\nJ_pump = sqrt(pump) * σm'\ntier = 2\nM_Heom = M_Boson(H_s, tier, threshold = 1e-6, Bath)\nM_Heom = addBosonDissipator(M_Heom, J_pump)\n\nChecking the importance value for each ADOs...[DONE]\nPreparing block matrices for HEOM Liouvillian superoperator (using 4 threads)...\nProgress: [                              ]   1.0% --- Elapsed Time: 0h 00m 01s (ETA: 0h 01m 36s)Progress: [==============================] 100.0% --- Elapsed Time: 0h 00m 01s (ETA: 0h 00m 00s)\nConstructing matrix...[DONE]\n\n\nBoson type HEOMLS matrix acting on even-parity ADOs\nsystem dims = [3, 2]\nnumber of ADOs N = 97\ndata =\nMatrixOperator(3492 × 3492)"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#solve-time-evolution-of-ados",
    "href": "HierarchicalEOM.jl/cavityQED.html#solve-time-evolution-of-ados",
    "title": "Cavity QED system",
    "section": "Solve time evolution of ADOs",
    "text": "Solve time evolution of ADOs\n\nt_list = 0:1:500\nsol_H = HEOMsolve(M_Heom, ψ0, t_list; e_ops = [σz, a' * a])\n\nSolving time evolution for ADOs by Ordinary Differential Equations method...\nProgress: [                              ]   0.2% --- Elapsed Time: 0h 00m 02s (ETA: 0h 16m 40s)Progress: [====================          ]  67.1% --- Elapsed Time: 0h 00m 03s (ETA: 0h 00m 01s)Progress: [==============================] 100.0% --- Elapsed Time: 0h 00m 04s (ETA: 0h 00m 00s)\n\n\nSolution of hierarchical EOM\n(return code: Success)\n----------------------------\nBtier = 2\nFtier = 0\nnum_states = 1\nnum_expect = 2\nODE alg.: OrdinaryDiffEqLowOrderRK.DP5{typeof(OrdinaryDiffEqCore.trivial_limiter!), typeof(OrdinaryDiffEqCore.trivial_limiter!), Static.False}(OrdinaryDiffEqCore.trivial_limiter!, OrdinaryDiffEqCore.trivial_limiter!, static(false))\nabstol = 1.0e-8\nreltol = 1.0e-6"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#solve-stationary-state-of-ados",
    "href": "HierarchicalEOM.jl/cavityQED.html#solve-stationary-state-of-ados",
    "title": "Cavity QED system",
    "section": "Solve stationary state of ADOs",
    "text": "Solve stationary state of ADOs\n\nsteady_H = steadystate(M_Heom);\n\nSolving steady state for ADOs by linear-solve method...[DONE]"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#expectation-values",
    "href": "HierarchicalEOM.jl/cavityQED.html#expectation-values",
    "title": "Cavity QED system",
    "section": "Expectation values",
    "text": "Expectation values\nobservable of atom: \\(\\sigma_z\\)\n\nσz_evo_H = real(sol_H.expect[1, :])\nσz_steady_H = expect(σz, steady_H)\n\n-0.3731173931282959\n\n\nobservable of cavity: \\(a^\\dagger a\\) (average photon number)\n\nnp_evo_H = real(sol_H.expect[2, :])\nnp_steady_H = expect(a' * a, steady_H)\n\n0.4312130158260074\n\n\nplot results\n\nfig = Figure(size = (600, 350))\n\nax1 = Axis(fig[1, 1], xlabel = L\"t\")\nlines!(ax1, t_list, σz_evo_H, label = L\"\\langle \\sigma_z \\rangle\", linestyle = :solid)\nlines!(ax1, t_list, ones(length(t_list)) .* σz_steady_H, label = L\"\\langle \\sigma_z \\rangle ~~(\\textrm{steady})\", linestyle = :dash)\naxislegend(ax1, position = :rt)\n\nax2 = Axis(fig[2, 1], xlabel = L\"t\")\nlines!(ax2, t_list, np_evo_H, label = L\"\\langle a^\\dagger a \\rangle\", linestyle = :solid)\nlines!(ax2, t_list, ones(length(t_list)) .* np_steady_H, label = L\"\\langle a^\\dagger a \\rangle ~~(\\textrm{steady})\", linestyle = :dash)\naxislegend(ax2, position = :rt)\n\nfig"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#power-spectrum",
    "href": "HierarchicalEOM.jl/cavityQED.html#power-spectrum",
    "title": "Cavity QED system",
    "section": "Power spectrum",
    "text": "Power spectrum\n\nω_list = 1:0.01:3\npsd_H = PowerSpectrum(M_Heom, steady_H, a, ω_list)\n\n# plot\nfig = Figure(size = (500, 350))\nax = Axis(fig[1, 1], xlabel = L\"\\omega\")\nlines!(ax, ω_list, psd_H)\n\nfig\n\nCalculating power spectrum in frequency domain...\nProgress: [========                      ]  27.4% --- Elapsed Time: 0h 00m 01s (ETA: 0h 00m 02s)Progress: [================              ]  55.7% --- Elapsed Time: 0h 00m 02s (ETA: 0h 00m 01s)Progress: [=========================     ]  85.1% --- Elapsed Time: 0h 00m 03s (ETA: 0h 00m 00s)Progress: [==============================] 100.0% --- Elapsed Time: 0h 00m 03s (ETA: 0h 00m 00s)\n[DONE]"
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#compare-with-master-eq.-approach",
    "href": "HierarchicalEOM.jl/cavityQED.html#compare-with-master-eq.-approach",
    "title": "Cavity QED system",
    "section": "Compare with Master Eq. approach",
    "text": "Compare with Master Eq. approach\nThe Lindblad master equations which describes the cavity couples to an extra bosonic reservoir with Drude-Lorentzian spectral density is given by\n\n# Drude_Lorentzian spectral density\nDrude_Lorentz(ω, Γ, W) = 4 * Γ * W * ω / ((ω)^2 + (W)^2)\n\n# Bose-Einstein distribution\nn_b(ω, kT) = 1 / (exp(ω / kT) - 1)\n\n# build the jump operators\njump_op = [\n    sqrt(Drude_Lorentz(ωc, Γ, W) * (n_b(ωc, kT) + 1)) * a,\n    sqrt(Drude_Lorentz(ωc, Γ, W) * (n_b(ωc, kT)))     * a',\n    J_pump\n];\n\n# construct the HEOMLS matrix for master equation\nM_master = M_S(H_s)\nM_master = addBosonDissipator(M_master, jump_op)\n\n# time evolution\nsol_M = HEOMsolve(M_master, ψ0, t_list; e_ops = [σz, a' * a]);\n\n# steady state\nsteady_M = steadystate(M_master);\n\n# expectation value of σz\nσz_evo_M = real(sol_M.expect[1, :])\nσz_steady_M = expect(σz, steady_M)\n\n# average photon number\nnp_evo_M = real(sol_M.expect[2, :])\nnp_steady_M = expect(a' * a, steady_M);\n\nConstructing Liouville-von Neumann superoperator...\n[DONE]\nSolving time evolution for ADOs by Ordinary Differential Equations method...\nProgress: [==============================] 100.0% --- Elapsed Time: 0h 00m 00s (ETA: 0h 00m 00s)\nSolving steady state for ADOs by linear-solve method...[DONE]\n\n\nplot results\n\nfig = Figure(size = (600, 350))\n\nax1 = Axis(fig[1, 1], xlabel = L\"t\")\nlines!(ax1, t_list, σz_evo_M, label = L\"\\langle \\sigma_z \\rangle\", linestyle = :solid)\nlines!(ax1, t_list, ones(length(t_list)) .* σz_steady_M, label = L\"\\langle \\sigma_z \\rangle ~~(\\textrm{steady})\", linestyle = :dash)\naxislegend(ax1, position = :rt)\n\nax2 = Axis(fig[2, 1], xlabel = L\"t\")\nlines!(ax2, t_list, np_evo_M, label = L\"\\langle a^\\dagger a \\rangle\", linestyle = :solid)\nlines!(ax2, t_list, ones(length(t_list)) .* np_steady_M, label = L\"\\langle a^\\dagger a \\rangle ~~(\\textrm{steady})\", linestyle = :dash)\naxislegend(ax2, position = :rt)\n\nfig\n\n\n\n\n\n\n\n\nWe can also calculate the power spectrum\n\nω_list = 1:0.01:3\npsd_M = PowerSpectrum(M_master, steady_M, a, ω_list)\n\n# plot\nfig = Figure(size = (500, 350))\nax = Axis(fig[1, 1], xlabel = L\"\\omega\")\nlines!(ax, ω_list, psd_M)\n\nfig\n\nCalculating power spectrum in frequency domain...\nProgress: [==============================] 100.0% --- Elapsed Time: 0h 00m 00s (ETA: 0h 00m 00s)\n[DONE]\n\n\n\n\n\n\n\n\n\nDue to the weak coupling between the system and an extra bosonic environment, the Master equation’s outcome is expected to be similar to the results obtained from the HEOM method."
  },
  {
    "objectID": "HierarchicalEOM.jl/cavityQED.html#version-information",
    "href": "HierarchicalEOM.jl/cavityQED.html#version-information",
    "title": "Cavity QED system",
    "section": "Version Information",
    "text": "Version Information\n\nHierarchicalEOM.versioninfo()\n\n\n                                   __\n                                  /  \\\n __     __                     __ \\__/ __\n|  |   |  |                   /  \\    /  \\\n|  |   |  | ______   ______   \\__/_  _\\__/\n|  |___|  |/  __  \\ /  __  \\ / '   \\/     \\\n|   ___   |  |__)  |  /  \\  |    _     _   |\n|  |   |  |   ____/| (    ) |   / \\   / \\  |\n|  |   |  |  |____ |  \\__/  |  |   | |   | |\n|__|   |__|\\______) \\______/|__|   |_|   |_|\n\nJulia framework for Hierarchical Equations of Motion\n≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡≡\nCopyright © QuTiP team 2023 and later.\nLead  developer : Yi-Te Huang\nOther developers:\n    Simon Cross, Neill Lambert, Po-Chen Kuo and Shen-Liang Yang\n\nPackage information:\n====================================\nJulia              Ver. 1.11.2\nHierarchicalEOM    Ver. 2.3.3\nQuantumToolbox     Ver. 0.24.0\nSciMLOperators     Ver. 0.3.12\nLinearSolve        Ver. 2.38.0\nOrdinaryDiffEqCore Ver. 1.14.1\n\nSystem information:\n====================================\nOS       : Linux (x86_64-linux-gnu)\nCPU      : 4 × AMD EPYC 7763 64-Core Processor\nMemory   : 15.615 GB\nWORD_SIZE: 64\nLIBM     : libopenlibm\nLLVM     : libLLVM-16.0.6 (ORCJIT, znver3)\nBLAS     : libopenblas64_.so (ilp64)\nThreads  : 4 (on 4 virtual cores)"
  }
]