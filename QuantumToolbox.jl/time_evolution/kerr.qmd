---
title: "Kerr nonlinearities"
author: Li-Xun Cai
date: 2025-02-01  # last update (keep this comment as a reminder)

engine: julia
execution:
  eval: false
---

Inspirations taken from [this QuTiP tutorial](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v5/lectures/Lecture-14-Kerr-nonlinearities.ipynb) by J. R. Johansson.

This tutorial demonstrates the use of 

- [`plot_wigner`](https://qutip.org/QuantumToolbox.jl/stable/resources/api#QuantumToolbox.plot_wigner)
- [`wigner`](https://qutip.org/QuantumToolbox.jl/stable/resources/api#QuantumToolbox.wigner)

by exploring Kerr nonlinearities.

## Introduction

Kerr nonlinearities arise from the interaction between the electromagnetic field and a nonlinear medium with a significant third-order susceptibility, $\chi^{(3)}$. Since experiments typically use monochromatic light sources such as lasers, we restrict our discussion to a single light mode.

The derivation or the Hamiltonian is based on the following principles:

1. The interaction of athe electric field $E$ with polarization density $\mathcal{P}$
    $$
    H \sim \int dV \mathcal{P} \cdot E 
    $$
2.  The dominance of the third-order polarization term $\mathcal{P}^{(3)}$ in considered medium
    $$
    \mathcal{P} = \mathcal{P}_0 + \varepsilon_0 \chi^{(1)} E + \varepsilon_0 \chi^{(2)} E^2 + \varepsilon_0 \chi^{(3)} E^3 + \dots \simeq \varepsilon_0 \chi^{(3)} E^3
    $$
3. The quantization of the electromagnetic mode
    $$
    E \sim \hat{a}^\dagger \hat{a}
    $$
    where $\hat{a}$ is the annihilation operator of the considered light mode

With the expressions above, we have $H \propto (\hat{a}^\dagger + \hat{a})^4$. Further expanding and performing [rotating wave approximation (RWA)](https://en.wikipedia.org/wiki/Rotating-wave_approximation), terms that rotate at different frequency are dropped, yielding the Hamiltonian
$$
H = \frac{\chi}{2} (\hat{a}^\dagger)^2 (\hat{a})^2.
$$
where $\chi$ here is the effective susceptibility mainly determined by the third-order susceptibility $\chi^{(3)}$.

## Code demonstration

```{julia}
using QuantumToolbox
using CairoMakie
```

We begin by defining functions for visualization:

1. `plot_variance` plots the expectation value of an operator `op` and shades the variance. 
2. `plot_Fock_dist` plots the dynamics of the Fock distribution.
```{julia}
function plot_variance(op, tlist, states)
    e = real.(expect(op, states))
    v = real.(variance(op, states))
    
    fig = Figure()
    ax = Axis(fig[1,1])
    lines!(ax, tlist, e)
    band!(ax, tlist, e .- v, e .+ v, alpha = 0.3)
    return fig, ax
end

function plot_Fock_dist(tlist, states)
    fig = Figure()
    ax = Axis(
        fig[1,1],
        xlabel = L"N",
        ylabel = L"t"
    )

    n_col = prod(states[1].dims)
    n_row = length(tlist)

    data = zeros(Float64, n_row, n_col)

    for (idx, state) in enumerate(states)
        data[idx, :] = real.(diag(state))
    end

    hm = heatmap!(
        ax, 
        0:(n_col-1), 
        tlist, 
        data', 
        colormap = cgrad([:white, :magenta]),
        colorrange = (0,1)
    )
    Colorbar(fig[1,2], hm, label = "Probability")

    
    return fig, ax
end
```

Next, we define the system parameters and operators.
```{julia}
N = 15 # Dimension of the Hilbert space
χ = 1  # effective susceptibility

a = destroy(N) # annihilation operator
n = num(N)     # number operator

# quadrature operators
x =  a + a'    
p = -1 * im * (a - a')

# Hamiltonian
H = 0.5 * χ * a' * a' * a * a
```

Since we are considering unitary dynamics, i.e., no dissipation, the dynamics are fully captured for $\chi t \in \left[0, 2 \pi \right]$, and the coherent initial state is representative for a laser light source. 

Note that if the keyword argument `e_ops` is not supplied to [`mesolve`](https://qutip.org/QuantumToolbox.jl/stable/resources/api#QuantumToolbox.sesolve), the returned `result` contains the state at each time point at field `states`. Consult the [user guide to `TimeEvolutionSol`](https://qutip.org/QuantumToolbox.jl/stable/users_guide/time_evolution/solution) for more details.
```{julia}
ψ0 = coherent(N, 2.0)
tlist = 0:0.01:(2*π / χ)

result = mesolve(H, ψ0, tlist)
```

We first check the expectation value dynamics of the number operator `n` with the two visualization functions we defined previously.
```{julia}
fig1, ax1 = plot_variance(n, tlist, result.states)
ax1.title = L"N"
display(fig1)

fig2, ax2 = plot_Fock_dist(tlist, result.states)
display(fig2)
```
As expected, the photon number is conserved throughout. Either the expeactation value or the Fock distribution are conserved in the nonlinear interaction.

We now turn to the quadrature operators. The expectation value dynamics of `x` and `p` are plotted below. 
```{julia}
titles = [L"x", L"p"]
for (idx, op) in enumerate([x, p])
    _fig, _ax = plot_variance(op, tlist, result.states)
    _ax.title = titles[idx]
    display(_fig)
end
```
There are two obvious facts in these plots that the nonlinear interaction has modified the initial coherent state

1. The expectation values do not oscillate as in a quantum harmonic oscillator.
2. The coherent states of a quantum harmonic oscillator should be at the equality of the uncertainty principle, i.e., $\Delta x \Delta p = \frac{\hbar}{2}$, yet the variance product in this case is clearly varying.

Moreover, The spikes and pits of the variances at $\chi t \sim \pi$ implies **squeezing** behaviour. We can extend the investigation to the wigner function with the built-in function [`plot_wigner`](https://qutip.org/QuantumToolbox.jl/stable/resources/api#QuantumToolbox.plot_wigner). 
```{julia}
fig3, ax3, hm3 = plot_wigner(result.states[315])
ax3.title = "t = " * string(tlist[315])
Colorbar(fig3[1,2], hm3)
display(fig3)
```
As the plot revealed, the state at $\chi t = \pi$ is in fact the [**cat state**](https://en.wikipedia.org/wiki/Cat_state#Cat_states_in_single_modes).

The dynamics of wigner function can also be explored and visualized as below with function [`wigner`](https://qutip.org/QuantumToolbox.jl/stable/resources/api#QuantumToolbox.wigner).
```{julia}
fig4, ax4, HM4 = plot_wigner(result.states[1])

Colorbar(fig4[1,2], HM4)

record(fig4, "wigner_dyn.gif", 1:length(tlist); framerate=24) do t
    wig = wigner(
        result.states[t], 
        range(-7.5, 7.5, 200), 
        range(-7.5, 7.5, 200)
        )
    HM4[3] = transpose(wig)
end
```
![](images/kerr_wigner_dyn.gif)

As the recorded evolution showed, the wigner function evolves

## Version Information
```{julia}
QuantumToolbox.versioninfo()
```
